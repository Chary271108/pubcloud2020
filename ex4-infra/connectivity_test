#! /bin/bash

# connectivity_test - check virtual network infrastructure connectivity
# Copyright (C) 2020  Erik Auerswald <auerswal@unix-ag.uni-kl.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
set -u

TF_STATE=terraform/terraform.tfstate
R_USER=ubuntu
SSH_OPTS='-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'

# report test failure on error
trap 'printf -- "***\n*** --- CONNECTIVITY TEST FAILED ---\n***\n"' ERR

# directly connect to web server via elastic IP address
echo '--> connecting to elastic IP address via IP address...'
EIP_IP=$(jq -r '.outputs.eip_ip.value' "$TF_STATE")
ssh $SSH_OPTS "${R_USER}@${EIP_IP}" true
echo '--> OK'
echo '--> connecting to elastic IP address via DNS name...'
EIP_DNS=$(jq -r '.outputs.eip_name.value' "$TF_STATE")
ssh $SSH_OPTS "${R_USER}@${EIP_DNS}" true
echo '--> OK'

# directly connect to jump server
echo '--> connecting to jump server via IP address...'
J_IP=$(jq -r '.outputs.jump_host_ip.value' "$TF_STATE")
ssh $SSH_OPTS "${R_USER}@${J_IP}" true
echo '--> OK'
echo '--> connecting to jump server via DNS name...'
J_DNS=$(jq -r '.outputs.jump_host_name.value' "$TF_STATE")
ssh $SSH_OPTS "${R_USER}@${J_DNS}" true
echo '--> OK'

# access web page of web server
echo '--> accessing web page via IP address...'
wget -q -O/dev/null "http://${EIP_IP}/"
echo '--> OK'
echo '--> accessing web page via DNS name...'
wget -q -O/dev/null "http://${EIP_DNS}/"
echo '--> OK'

# jump host is no web server
echo '--> check that jump host is no web server (via IP)...'
if wget -q -O/dev/null "http://${J_IP}/"
then false
else echo '--> OK'
fi
echo '--> check that jump host is no web server (via DNS)...'
if wget -q -O/dev/null "http://${J_DNS}/"
then false
else echo '--> OK'
fi

# access host on private subnet via jump host
echo '--> connecting via jump host to host on private subnet...'
P_IP=$(jq -r '.outputs.private_host_ip.value' "$TF_STATE")
ssh $SSH_OPTS -o "ProxyJump=${R_USER}@${J_IP}" "${R_USER}@${P_IP}" true
echo '--> OK'

# ping internal IP of web server from host on private subnet
echo '--> testing internal connectivity of host on private subnet...'
W_P_IP=$(jq -r '.outputs.web_server_private_ip.value' "$TF_STATE")
ssh $SSH_OPTS -o "ProxyJump=${R_USER}@${J_IP}" "${R_USER}@${P_IP}" \
  "ping -c2 $W_P_IP"
echo '--> OK'

# ping Google's 8.8.8.8 from host on private subnet
echo '--> testing for no external connectivity of host on private subnet...'
W_P_IP=$(jq -r '.outputs.web_server_private_ip.value' "$TF_STATE")
if ssh $SSH_OPTS -o "ProxyJump=${R_USER}@${J_IP}" "${R_USER}@${P_IP}" \
  'ping -c2 8.8.8.8'
then false
else echo '--> OK'
fi

# report success if this point in the script is reached
echo
echo '==> All tests passed successfully, :-)'
